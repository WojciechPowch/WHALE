{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/dialog-helper.service.ts","webpack:///./src/app/loginpage/login-action.service.ts","webpack:///./src/app/loginpage/loginpage.component.css","webpack:///./src/app/loginpage/loginpage.component.html","webpack:///./src/app/loginpage/loginpage.component.ts","webpack:///./src/app/mainpage/logout.service.ts","webpack:///./src/app/mainpage/mainpage.component.css","webpack:///./src/app/mainpage/mainpage.component.html","webpack:///./src/app/mainpage/mainpage.component.ts","webpack:///./src/app/regisration-page/regisration-page.component.css","webpack:///./src/app/regisration-page/regisration-page.component.html","webpack:///./src/app/regisration-page/regisration-page.component.ts","webpack:///./src/app/regisration-page/registration-data.ts","webpack:///./src/app/regisration-page/registration.service.ts","webpack:///./src/app/searchingpage/regex-click.directive.ts","webpack:///./src/app/searchingpage/regex-pick-dialog/regex-pick-dialog.component.css","webpack:///./src/app/searchingpage/regex-pick-dialog/regex-pick-dialog.component.html","webpack:///./src/app/searchingpage/regex-pick-dialog/regex-pick-dialog.component.ts","webpack:///./src/app/searchingpage/regex-unit/regex-unit.component.css","webpack:///./src/app/searchingpage/regex-unit/regex-unit.component.html","webpack:///./src/app/searchingpage/regex-unit/regex-unit.component.ts","webpack:///./src/app/searchingpage/searchingpage.component.css","webpack:///./src/app/searchingpage/searchingpage.component.html","webpack:///./src/app/searchingpage/searchingpage.component.ts","webpack:///./src/app/searchingpage/searchingpage.service.ts","webpack:///./src/app/session/session.ts","webpack:///./src/app/session/sessionholder.ts","webpack:///./src/app/variablesholder/variables.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\r\\n.container-custom {\\r\\n    width: 100vw;\\r\\n}\\r\\n\\r\\n.toolbar-item {\\r\\n    padding-left: 30px;\\r\\n    padding-right: 30px;\\r\\n}\"","module.exports = \"<!--<div class=\\\"container\\\" style=\\\"height: 10vh;\\\">\\n<div class=\\\"custom-fonts\\\">\\n    <nav class=\\\"navbar navbar-inverse navbar-nav-custom\\\">\\n        <div >\\n            <div class=\\\"collapse navbar-collapse\\\" >\\n                <ul class=\\\"nav navbar-nav navbar-nav-custom\\\" style=\\\" color: black;\\\">\\n                    <li><a [routerLink]=\\\"['/mainpage']\\\" routerLinkActive=\\\"router-link-active\\\" >Strona główna</a></li>\\n                    <li><a>O nas</a></li>\\n                    <li><a [routerLink]=\\\"['/search']\\\">Kopaj dane</a></li>\\n                    <li><a [routerLink]=\\\"['/login']\\\">Logowanie do serwisu</a></li>\\n                    <li *ngIf=\\\"showLogoutBlock()\\\"><a (click)=\\\"doLogOutProcedure()\\\">Wyloguj</a></li>\\n                </ul>\\n            </div>\\n        </div>\\n    </nav>\\n</div>\\n</div>-->\\n<mat-toolbar color=\\\"primary\\\"\\n    style=\\\"height: 10vh;\\\">\\n    <div class=\\\"toolbar-item\\\">\\n        <a style=\\\"color: #fafafa\\\"\\n            [routerLink]=\\\"['/mainpage']\\\" \\n            routerLinkActive=\\\"router-link-active\\\" >\\n            Strona główna\\n        </a>\\n    </div>\\n    <div class=\\\"toolbar-item\\\">\\n        <a style=\\\"color: #fafafa\\\"\\n            [routerLink]=\\\"['/search']\\\">\\n            Kopaj dane\\n        </a>\\n    </div>\\n    <div class=\\\"toolbar-item\\\">\\n        <a style=\\\"color: #fafafa\\\"\\n            [routerLink]=\\\"['/login']\\\">\\n            Logowanie do serwisu\\n        </a>\\n    </div>\\n</mat-toolbar>\\n\\n<router-outlet></router-outlet>\\n\\n\\n\"","import { Component } from '@angular/core';\nimport { RouterModule, Routes, Router } from '@angular/router';\nimport { SearchingpageComponent } from './searchingpage/searchingpage.component';\nimport { MainpageComponent } from './mainpage/mainpage.component';\nimport { LogoutService } from './mainpage/logout.service';\nimport { SessionHolder } from './session/sessionholder';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'datawhale';\n\n  constructor(private logoutService: LogoutService,\n              private router: Router) {}\n\n  doLogOutProcedure(): any {\n    const sessionHolder = SessionHolder.getInstance();\n    const activeLogin = sessionHolder.getActiveLogin();\n    this.logoutService.sendLogoutRequest(activeLogin)\n      .subscribe( response => {\n        if (response.success === 'true') {\n          SessionHolder.getInstance().removeSession(activeLogin);\n          this.router.navigate(['/login']);\n        }\n      });\n  }\n\n  showLogoutBlock(): boolean {\n    const sessionHolder = SessionHolder.getInstance();\n    return sessionHolder.checkIsAnySessionExits();\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, Component } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\nimport { SearchingpageComponent } from './searchingpage/searchingpage.component';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MainpageComponent } from './mainpage/mainpage.component';\nimport { LoginpageComponent } from './loginpage/loginpage.component';\nimport { MatButtonModule,\n        MatCheckboxModule,\n        MatIconModule,\n        MatFormFieldModule,\n        MatInputModule,\n        MatToolbarModule,\n        MatToolbarRow,\n        MatDialogModule,\n        MatSnackBarModule} from '@angular/material';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { RegisrationPageComponent } from './regisration-page/regisration-page.component';\nimport { RegexPickDialogComponent } from './searchingpage/regex-pick-dialog/regex-pick-dialog.component';\nimport { RegexUnitComponent } from './searchingpage/regex-unit/regex-unit.component';\nimport { RegexClickDirective } from './searchingpage/regex-click.directive';\n\n\nconst appRoutes: Routes = [\n  { path: 'search', component: SearchingpageComponent },\n  { path: 'mainpage', component: MainpageComponent },\n  { path: 'login', component: LoginpageComponent },\n  { path: 'register', component: RegisrationPageComponent },\n  { path: '', redirectTo: 'mainpage', pathMatch: 'full' }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SearchingpageComponent,\n    MainpageComponent,\n    LoginpageComponent,\n    RegisrationPageComponent,\n    RegexPickDialogComponent,\n    RegexUnitComponent,\n    RegexClickDirective\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    BrowserAnimationsModule,\n    MatInputModule,\n    MatFormFieldModule,\n    MatIconModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatDialogModule,\n    ReactiveFormsModule,\n    MatSnackBarModule,\n    RouterModule.forRoot (\n      appRoutes\n    )\n  ],\n  entryComponents: [\n    RegexPickDialogComponent\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { MatDialogRef, MatDialog } from '@angular/material';\nimport { RegexPickDialogComponent } from './searchingpage/regex-pick-dialog/regex-pick-dialog.component';\nimport { RegexDialogData } from './searchingpage/regex-pick-dialog/regex-dialog-data';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DialogHelperService {\n\n  constructor(private dialog: MatDialog) { }\n\n  public openRegexPickDialog(data: RegexDialogData, callback: Function): void {\n    const dialogRef: MatDialogRef<RegexPickDialogComponent> = this.getDialogRef(data);\n\n    dialogRef.afterClosed().subscribe(\n      (result) => {\n        callback(result);\n      }\n    );\n  }\n\n  private getDialogRef(data: RegexDialogData): MatDialogRef<RegexPickDialogComponent> {\n    return this.dialog.open(RegexPickDialogComponent, {\n      width: '300px',\n      data: data\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { SessionHolder } from './../session/sessionholder';\nimport { Observable } from 'rxjs';\nimport { EnviromentVariables } from '../variablesholder/variables';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginActionService {\n\n  constructor(private http: HttpClient) { }\n\n  authenticateUser(login: string, password: string): any {\n    const hostPath = EnviromentVariables.getLocation();\n    let httpParams: HttpParams = this.getHttpParams(login, password);\n    return this.http.post<any>(`${hostPath}/singin`, {}, {\n      params: httpParams\n    });\n  }\n\n  private getHttpParams(login: string, password: string): HttpParams {\n    let httpParams: HttpParams = new HttpParams();\n    httpParams = httpParams.set('login', login);\n    httpParams = httpParams.set('password', password);\n    return httpParams;\n  }\n\n  createLocalSession(login: string): void {\n    const sessionHolder = SessionHolder.getInstance();\n    sessionHolder.addSession(login);\n  }\n}\n","module.exports = \".custom-container {\\r\\n    top: 45%;\\r\\n}\\r\\n\\r\\n.login-page-container {\\r\\n    width: 100vw; \\r\\n    height: 90vh; \\r\\n    display: flex; \\r\\n    align-items: center; \\r\\n    justify-content: center;\\r\\n}\\r\\n\\r\\n.form-container {\\r\\n    padding-left: 50px; \\r\\n    padding-right: 50px; \\r\\n    padding-top: 50px; \\r\\n    padding-bottom: 50px; \\r\\n    border: 1px groove #3f51b5 ; \\r\\n    border-radius: 1%;\\r\\n}\\r\\n\\r\\n.form-title {\\r\\n    width: 100%; \\r\\n    display: flex; \\r\\n    align-items: center; \\r\\n    justify-content: center; \\r\\n    padding-bottom: 10%; \\r\\n    font-size: 130%; \\r\\n    color: #3f51b5;\\r\\n}\"","module.exports = \"<div class=\\\"login-page-container\\\">\\n  <div class=\\\"form-container\\\">\\n    <div class=\\\"form-title\\\">\\n      <label>Logowanie do serwisu</label>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <mat-form-field style=\\\"width: 100%;\\\" appearance=\\\"outline\\\">\\n        <mat-label>Login</mat-label>\\n        <input\\n          [(ngModel)]=\\\"login\\\" \\n          matInput placeholder=\\\"Login\\\">\\n        <mat-icon matSuffix></mat-icon>\\n      </mat-form-field>\\n    </div>\\n    <div class=\\\"row\\\">\\n      <mat-form-field style=\\\"width: 100%;\\\" appearance=\\\"outline\\\">\\n        <mat-label>Hasło</mat-label>\\n        <input\\n          [(ngModel)]=\\\"password\\\" \\n          type=\\\"password\\\"\\n          matInput placeholder=\\\"Hasło\\\">\\n        <mat-icon matSuffix></mat-icon>\\n      </mat-form-field>\\n    </div>\\n    <button style=\\\"width: 100%;\\\"\\n      (click)=\\\"onLoginButtonClick(login, password)\\\" \\n      mat-button \\n      color=\\\"primary\\\">\\n        Zaloguj do serwisu\\n    </button>\\n    <button mat-button\\n      color=\\\"primary\\\"\\n      style=\\\"width: 100%;\\\"\\n      (click)=\\\"onRegisterButtonClick()\\\">\\n      Zarejestruj się\\n    </button>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { LoginActionService } from './login-action.service';\nimport { JsonpInterceptor } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material';\n\n@Component({\n  selector: 'app-loginpage',\n  templateUrl: './loginpage.component.html',\n  styleUrls: ['./loginpage.component.css'],\n  providers: [LoginActionService]\n})\nexport class LoginpageComponent implements OnInit {\n\n  login = '';\n  password = '';\n  constructor(private loginService: LoginActionService,\n              private router: Router,\n              private sanckBar: MatSnackBar) { }\n\n  ngOnInit() {\n  }\n\n  onLoginButtonClick(login: string, password: string): boolean {\n    return this.loginService.authenticateUser(login, password)\n      .subscribe((response) => {\n        if (response.success === 'true') {\n          this.loginService.createLocalSession(login);\n          this.router.navigate(['/search']);\n        } else if (response.success === 'false') {\n          this.openLoginFailureSnackBar();\n        }\n      },\n      (error) => {\n        this.openFailureSnackBar();\n      });\n  }\n\n  private openLoginFailureSnackBar(): void {\n    this.openSnackBar('Nieprawidłowy login lub hasło', 'Spróbuj ponownie');\n  }\n\n  private openFailureSnackBar(): void {\n    this.openSnackBar('Błąd komunikacji z serwerem', 'Spróbuj ponownie');\n  }\n\n  private openSnackBar(message: string, action: string): void {\n    this.sanckBar.open(message, action, {\n      duration: 2000\n    });\n  }\n\n  onRegisterButtonClick(): void {\n    this.router.navigate(['/register']);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LogoutService {\n\n  constructor(private http: HttpClient) { }\n\n  sendLogoutRequest(login: string): Observable<any> {\n    const params = {\n      params: {\n        login: login\n      }\n    };\n    return this.http.post<any>('http://localhost:8080/logout', params);\n  }\n}\n","module.exports = \".scroll-container {\\r\\n    /*scroll-snap-type: y mandatory;*/\\r\\n    scroll-behavior: smooth;\\r\\n}\\r\\n\\r\\n.scroll-item {\\r\\n    /*scroll-snap-align: start;*/\\r\\n}\\r\\n\\r\\n.navigation-container {\\r\\n    position: fixed;\\r\\n    left: 0%;\\r\\n    bottom: 0%;\\r\\n    width: 100vw;\\r\\n    display: flex;\\r\\n    align-content: center;\\r\\n    justify-content: center;\\r\\n}\\r\\n\\r\\n.navigation {\\r\\n    display: flex;\\r\\n    align-content: center;\\r\\n    justify-content: center;\\r\\n    width: 20vw;\\r\\n}\\r\\n\\r\\n.navigation-item {\\r\\n    height: 30px;\\r\\n    width: 30px;\\r\\n    margin: 30px;\\r\\n    border-radius: 50%;\\r\\n    background-color: #3f51b5;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n}\\r\\n\\r\\n\"","module.exports = \"<div style=\\\"height: 90vh; width: 100vw; overflow-y: scroll; overflow-x: hidden;\\\"\\n  class=\\\"scroll-container\\\">\\n    <div style=\\\"height: 90vh; width: 100vw;\\\"\\n    class=\\\"scroll-item\\\">\\n    \\n    </div>\\n    <div style=\\\"height: 90vh; width: 100vw;\\\"\\n      class=\\\"scroll-item\\\">\\n\\n    </div>\\n    <div style=\\\"height: 90vh; width: 100vw;\\\"\\n      class=\\\"scroll-item\\\">\\n  \\n    </div>\\n</div>\\n\\n<!--<div class=\\\"navigation-container\\\">\\n  <div class=\\\"navigation\\\">\\n    <div class=\\\"navigation-item\\\">\\n      <a href=\\\"#s1\\\"></a>\\n    </div>\\n    <div class=\\\"navigation-item\\\">\\n      <a href=\\\"#s2\\\"></a>\\n    </div>\\n    <div class=\\\"navigation-item\\\">\\n      <a href=\\\"#s3\\\"></a>\\n    </div>\\n  </div>\\n</div>-->\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { LogoutService } from './logout.service';\nimport { SessionHolder } from '../session/sessionholder';\n\n@Component({\n  selector: 'app-mainpage',\n  templateUrl: './mainpage.component.html',\n  styleUrls: ['./mainpage.component.css']\n})\nexport class MainpageComponent implements OnInit {\n\n  constructor(private logoutService: LogoutService) { }\n\n  ngOnInit() {\n  }\n\n  doLogOutProcedure(): any {\n    const activeLogin = SessionHolder.getInstance().getActiveLogin();\n    this.logoutService.sendLogoutRequest(activeLogin)\n      .subscribe( response => {\n        if (response.success === 'true') {\n          SessionHolder.getInstance().removeSession(activeLogin);\n        }\n      });\n  }\n\n}\n","module.exports = \".main-container {\\r\\n    width: 100vw;\\r\\n    height: 90vh;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n}\\r\\n\\r\\n.form-field {\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.flex-row {\\r\\n    width: 100%;\\r\\n    display: flex;\\r\\n    justify-content: flex-end;\\r\\n    align-content: flex-end;\\r\\n}\"","module.exports = \"<form [formGroup]=\\\"registration\\\">\\n<div class=\\\"main-container\\\">\\n  <div style=\\\"height: 40vh; width: 35vw;\\\">\\n    <div class=\\\"row\\\">\\n      <mat-form-field class=\\\"form-field\\\" appearance=\\\"outline\\\">\\n        <mat-label>Imię</mat-label>\\n        <input formControlName=\\\"name\\\" \\n          matInput\\n          [(ngModel)]=\\\"data.name\\\" \\n          placeholder=\\\"Imię\\\">\\n      </mat-form-field>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <mat-form-field class=\\\"form-field\\\" appearance=\\\"outline\\\">\\n        <mat-label>Nazwisko</mat-label>\\n        <input formControlName=\\\"lastName\\\" \\n          matInput\\n          [(ngModel)]=\\\"data.lastName\\\" \\n          placeholder=\\\"Nazwisko\\\">\\n      </mat-form-field>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <mat-form-field class=\\\"form-field\\\" appearance=\\\"outline\\\">\\n        <mat-label>NIP</mat-label>\\n        <input formControlName=\\\"nip\\\" \\n          matInput\\n          [(ngModel)]=\\\"data.nip\\\" \\n          placeholder=\\\"NIP\\\">\\n        <mat-error>Pole NIP jest wymagane!</mat-error>\\n      </mat-form-field>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <mat-form-field class=\\\"form-field\\\" appearance=\\\"outline\\\">\\n        <mat-label>Login</mat-label>\\n        <input formControlName=\\\"login\\\" \\n          matInput\\n          [(ngModel)]=\\\"data.login\\\" \\n          placeholder=\\\"Login\\\">\\n        <mat-error>Pole Login jest wymagane!</mat-error>\\n      </mat-form-field>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <mat-form-field class=\\\"form-field\\\" appearance=\\\"outline\\\">\\n        <mat-label>Hasło</mat-label>\\n        <input formControlName=\\\"password\\\" \\n          matInput \\n          type=\\\"password\\\"\\n          [(ngModel)]=\\\"data.password\\\" \\n          placeholder=\\\"Hasło\\\">\\n        <mat-error>Pole hasło jest wymagane!</mat-error>\\n      </mat-form-field>\\n    </div>\\n\\n    <div class=\\\"row\\\">\\n      <mat-form-field class=\\\"form-field\\\" appearance=\\\"outline\\\">\\n        <mat-label>Powtórz hasło</mat-label>\\n        <input formControlName=\\\"passworddup\\\" \\n          matInput \\n          type=\\\"password\\\"\\n          [(ngModel)]=\\\"passwordDup\\\" \\n          placeholder=\\\"Powtórz hasło\\\">\\n        <mat-error *ngIf=\\\"!checkPasswordIdentity()\\\">Wprowadzone hasła nie są identyczne!</mat-error>\\n      </mat-form-field>\\n    </div>\\n\\n    <div class=\\\"row flex-row\\\">\\n      <button mat-raised-button \\n          color=\\\"primary\\\"\\n          type=\\\"submit\\\"\\n          [disabled]=\\\"!checkIsSubmitAvalable()\\\"\\n          (click)=\\\"onSubmit()\\\">\\n          Dalej\\n    </button>\\n    </div>\\n  </div>\\n</div>\\n</form>\"","import { Component, OnInit } from '@angular/core';\nimport { RegistrationData } from './registration-data';\nimport { FormGroup, Validators, FormControl } from '@angular/forms';\nimport { RegistrationService } from './registration.service';\n\n@Component({\n  selector: 'app-regisration-page',\n  templateUrl: './regisration-page.component.html',\n  styleUrls: ['./regisration-page.component.css']\n})\nexport class RegisrationPageComponent implements OnInit {\n  public data: RegistrationData = new RegistrationData();\n\n  public passwordDup: string;\n\n  registration = new FormGroup({\n    name: new FormControl('', Validators.required),\n    lastName: new FormControl('', Validators.required),\n    nip: new FormControl('', Validators.required),\n    login: new FormControl('', Validators.required),\n    password: new FormControl('', Validators.required),\n    passworddup: new FormControl('', Validators.required)\n  });\n\n  constructor(private service: RegistrationService) { }\n\n  ngOnInit() {\n  }\n\n  public checkPasswordIdentity(): boolean {\n    return (this.data.password === this.passwordDup) && this.data.password !== undefined && this.passwordDup !== undefined;\n  }\n\n  public checkIsSubmitAvalable(): boolean {\n    return this.registration.valid && this.checkPasswordIdentity();\n  }\n\n  public onSubmit(): void {\n    this.service.sendRegistrationRequest(this.data).subscribe(\n      response => {\n        if (response.success) {\n          \n        }\n      }\n    );\n  }\n\n}\n","export class RegistrationData {\r\n    name: string;\r\n    lastName: string;\r\n    login: string;\r\n    nip: string;\r\n    password: string;\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { RegistrationData } from './registration-data';\nimport { Observable } from 'rxjs';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { EnviromentVariables } from '../variablesholder/variables';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegistrationService {\n\n  constructor(private http: HttpClient) { }\n\n  public sendRegistrationRequest(data: RegistrationData): Observable<any> {\n    let httpParams: HttpParams = this.prepareHttpParams(data);\n    return this.http.post<any>(`${EnviromentVariables.getLocation()}/singup`, {}, {\n      params: httpParams\n    });\n  }\n\n  private prepareHttpParams(data: RegistrationData): HttpParams {\n    let httpParams: HttpParams = new HttpParams();\n    httpParams = httpParams.set('login', data.login);\n    httpParams = httpParams.set('password', data.password);\n    httpParams = httpParams.set('nip', data.nip);\n    return httpParams;\n  }\n}\n","import { Directive, Input, HostListener } from '@angular/core';\nimport { RegexDialogData } from './regex-pick-dialog/regex-dialog-data';\nimport { DialogHelperService } from './../dialog-helper.service';\n\n@Directive({\n  selector: '[appRegexClick]'\n})\nexport class RegexClickDirective {\n\n  @Input('appRegexClick') data: RegexDialogData;\n\n  constructor(private dialogHelper: DialogHelperService) { }\n\n  @HostListener('click')\n  onRegexItemClick() {\n    this.dialogHelper.openRegexPickDialog(this.data, this.getDialogFunction());\n  }\n\n  private getDialogFunction(): Function {\n    return (result: RegexDialogData) => {};\n  }\n\n}\n","module.exports = \".custom-form-field {\\r\\n    width: 100%;\\r\\n}\"","module.exports = \"<h1 mat-dialog-title>Dodaj wyrażenie REGEX</h1>\\n<form [formGroup]=\\\"regexForm\\\">\\n  <div mat-dialog-content>\\n\\n    <mat-form-field class=\\\"custom-form-field\\\">\\n      <input matInput \\n            placeholder=\\\"Nazwa\\\" \\n            required\\n            formControlName=\\\"name\\\"\\n            [(ngModel)]=\\\"data.name\\\">\\n      <mat-error>Pole nazwa jest wymagane!</mat-error>\\n    </mat-form-field>\\n\\n    <mat-form-field class=\\\"custom-form-field\\\">\\n      <input matInput \\n            placeholder=\\\"Wyrażenie\\\"\\n            required\\n            formControlName=\\\"query\\\" \\n            [(ngModel)]=\\\"data.query\\\">\\n            <mat-error>Pole wyrażenie jest wymagane!</mat-error>\\n    </mat-form-field>\\n\\n  </div>\\n\\n  <div mat-dialog-actions>\\n    <button mat-button\\n          (click)=\\\"cancelClick()\\\">\\n          Anuluj\\n    </button>\\n\\n    <button *ngIf=\\\"acceptMode\\\"\\n          mat-button \\n          cdkFocusInitial\\n          type=\\\"submit\\\"\\n          [disabled]=\\\"checkIsFormValid()\\\"\\n          [mat-dialog-close]=\\\"data\\\">\\n          Dodaj\\n    </button>\\n\\n  </div>\\n</form>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS } from '@angular/material';\nimport { RegexDialogData } from './regex-dialog-data';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-regex-pick-dialog',\n  templateUrl: './regex-pick-dialog.component.html',\n  styleUrls: ['./regex-pick-dialog.component.css']\n})\nexport class RegexPickDialogComponent implements OnInit {\n  private acceptMode: boolean;\n\n  constructor(public dialogRef: MatDialogRef<RegexPickDialogComponent>,\n              @Inject(MAT_DIALOG_DATA) public data: RegexDialogData) { }\n  \n  regexForm = new FormGroup({\n    name: new FormControl('', [Validators.required]),\n    query: new FormControl('', [Validators.required])\n  });\n\n  ngOnInit() {\n    this.checkIsAcceptMode();\n  }\n\n  private checkIsAcceptMode(): void {\n    this.acceptMode = this.data.name === '';\n  }\n\n  public cancelClick(): void {\n    this.dialogRef.close();\n  }\n\n  public checkIsFormValid(): boolean {\n    return !this.regexForm.valid;\n  }\n\n}\n","module.exports = \".flex-container {\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n    align-items: center;\\r\\n}\\r\\n\\r\\n.ico:hover {\\r\\n    cursor: pointer;\\r\\n}\"","module.exports = \"<div class=\\\"flex-container\\\">\\n  <mat-icon class=\\\"ico\\\"\\n    (click)=\\\"delete()\\\">\\n    close\\n  </mat-icon>\\n\\n  <div [appRegexClick]=\\\"data\\\">\\n    {{data.name}}\\n  </div>\\n</div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { RegexDialogData } from '../regex-pick-dialog/regex-dialog-data';\nimport { SearchingpageService } from './../searchingpage.service';\n\n@Component({\n  selector: 'app-regex-unit',\n  templateUrl: './regex-unit.component.html',\n  styleUrls: ['./regex-unit.component.css']\n})\nexport class RegexUnitComponent implements OnInit {\n\n  @Input('data') data: RegexDialogData;\n\n  constructor(private searchingPageService: SearchingpageService) { }\n\n  ngOnInit() {\n  }\n\n  public delete(): void {\n    this.searchingPageService.removeFromRegexList(this.data);\n  }\n\n}\n","module.exports = \".main-panel {\\r\\n    height: 90vh; \\r\\n    width: 100vw; \\r\\n    overflow-x: hidden; \\r\\n    display: flex; \\r\\n    align-items: center; \\r\\n    justify-content: center;\\r\\n}\\r\\n\\r\\n.sub-container {\\r\\n    width: 50vw; \\r\\n    height: 90vh;\\r\\n}\\r\\n\\r\\n.controls-container {\\r\\n    width: 100%; \\r\\n    height: 50%;\\r\\n}\\r\\n\\r\\n.main-input-container {\\r\\n    width: 100%; \\r\\n    height: 20%; \\r\\n    padding-top: 10%;\\r\\n    padding-bottom: 10%;\\r\\n    display: flex; \\r\\n    align-items: center; \\r\\n    justify-content: center;\\r\\n}\\r\\n\\r\\n.custom-form-field {\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n.buttons-contaner {\\r\\n    width: 100%; \\r\\n    height: 10%; \\r\\n    display: flex; \\r\\n    align-items: flex-end; \\r\\n    justify-content: flex-end;\\r\\n}\\r\\n\\r\\n.regex-container {\\r\\n    width: 100%;\\r\\n    height: 10%;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    justify-content: flex-start;\\r\\n}\\r\\n\\r\\n.tools-panel {\\r\\n    width: 100%;\\r\\n    display: flex;\\r\\n    align-items: center;\\r\\n    margin-top: 5%;\\r\\n    padding: 1.5%;\\r\\n    justify-content: flex-start;\\r\\n    border: 1px solid #D3D3D3;\\r\\n    border-radius: 4px;\\r\\n}\"","module.exports = \"<div class=\\\"main-panel\\\">\\n  <div class=\\\"sub-container\\\">\\n    <div class=\\\"controls-container\\\">\\n\\n      <div class=\\\"tools-panel\\\">\\n          <button (click)=\\\"openRegexPickDialog()\\\"\\n            mat-button>\\n            Dodaj własny REGEX\\n          </button>\\n      </div>\\n\\n      <div class=\\\"main-input-container\\\">\\n        <mat-form-field class=\\\"custom-form-field\\\"\\n          appearance=\\\"outline\\\">\\n          <input [(ngModel)]=\\\"query\\\" matInput placeholder=\\\"Wprowadź zapytanie...\\\">\\n        </mat-form-field>\\n      </div>\\n\\n      <div class=\\\"regex-container\\\"\\n        [ngStyle]=\\\"{ 'height' : service.getRegexList().length > 0 ? '10%' : '0' }\\\">\\n        <div *ngFor=\\\"let regex of service.getRegexList()\\\">\\n          <app-regex-unit\\n            [data]=\\\"regex\\\">\\n          </app-regex-unit>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"buttons-contaner\\\">\\n\\n        <button (click)=\\\"onSearchButtonClick(query)\\\"\\n          color=\\\"primary\\\"\\n          mat-raised-button>Wyszukaj</button>\\n\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { SearchingpageService } from '../searchingpage/searchingpage.service';\nimport { SessionHolder } from './../session/sessionholder';\nimport { Router } from '@angular/router';\nimport { MatDialog, MatDialogRef } from '@angular/material';\nimport { RegexPickDialogComponent } from './regex-pick-dialog/regex-pick-dialog.component';\nimport { DialogHelperService } from './../dialog-helper.service';\nimport { RegexDialogData } from './regex-pick-dialog/regex-dialog-data';\nimport { RegexClickDirective } from './regex-click.directive';\n\n@Component({\n  selector: 'app-searchingpage',\n  templateUrl: './searchingpage.component.html',\n  styleUrls: ['./searchingpage.component.css'],\n  providers: [SearchingpageService]\n})\nexport class SearchingpageComponent implements OnInit {\n\n  private query = '';\n\n  constructor(private service: SearchingpageService,\n              private router: Router,\n              private dialog: MatDialog,\n              private dialogHelper: DialogHelperService) { }\n\n  ngOnInit() {\n    // this.beforeInit();\n  }\n\n  private beforeInit(): void {\n    if (!this.checkIsSessionExist()) {\n      this.router.navigate(['/login']);\n    }\n  }\n\n  private checkIsSessionExist(): boolean {\n    const sessionHolder = SessionHolder.getInstance();\n    return sessionHolder.checkIsAnySessionExits();\n  }\n\n  public onSearchButtonClick(query: string): void {\n    this.service.loadData(query).subscribe( response => {\n      if (response) {\n        alert(response.success);\n      }\n    },\n    error => { alert('Some error was handled');\n    });\n  }\n\n  public openRegexPickDialog(): void {\n    this.dialogHelper.openRegexPickDialog(this.initNewRegexUnit(), (result: RegexDialogData) => {\n      this.service.addToRegexList(result);\n    });\n  }\n\n  private initNewRegexUnit(): RegexDialogData {\n    const regexUnit: RegexDialogData = {\n      name: '',\n      query: ''\n    };\n    return regexUnit;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\nimport { RegexDialogData } from './regex-pick-dialog/regex-dialog-data';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SearchingpageService {\n\n  constructor(private http: HttpClient) { }\n\n  private regexList: Array<RegexDialogData> = new Array<RegexDialogData>();\n\n  loadData(query: string): any {\n    query = this.prepareQuery(query);\n    const params_config = {\n      params: {\n        command: 'prepareSearch',\n        query: query\n      }\n    };\n    return this.http.post<any>('http://localhost:8080/redist', params_config);\n  }\n\n  prepareQuery(query: string): string {\n    return query.replace(' ', '+');\n  }\n\n  public getRegexList(): Array<RegexDialogData> {\n    return this.regexList;\n  }\n\n  public addToRegexList(item: RegexDialogData): void {\n    this.regexList.push(item);\n  }\n\n  public removeFromRegexList(item: RegexDialogData): void {\n    if (this.regexList.length === 1) {\n      this.regexList = new Array<RegexDialogData>();\n      return;\n    }\n    const index: number = this.regexList.indexOf(item);\n    this.regexList = this.regexList.splice(index, 1);\n  }\n}\n","export class Session {\r\n    private login: string;\r\n    public constructor(login: string) {\r\n        this.login = login;\r\n    }\r\n}\r\n","import { Session } from './session';\r\n\r\nexport class SessionHolder {\r\n\r\n    private static sessionHolder: SessionHolder = new SessionHolder();\r\n    private sessionMap: Map<string, Session> = new Map<string, Session>();\r\n\r\n    private constructor() {}\r\n\r\n    public static getInstance(): SessionHolder {\r\n        return this.sessionHolder;\r\n    }\r\n\r\n    public addSession(login: string): void {\r\n        if (this.sessionMap.size === 0) {\r\n            this.sessionMap.set(login, new Session(login));\r\n        }\r\n    }\r\n\r\n    public checkIsAnySessionExits(): boolean {\r\n        return this.sessionMap.size > 0;\r\n    }\r\n\r\n    public removeSession(login: string): boolean {\r\n        return this.sessionMap.delete(login);\r\n    }\r\n\r\n    public getActiveLogin(): string {\r\n        let activeLogin = '';\r\n        this.sessionMap.forEach((value, key, map) => {\r\n            activeLogin = key;\r\n            return;\r\n        });\r\n        return activeLogin;\r\n    }\r\n\r\n    public checkIsExistSession(): boolean {\r\n        return this.sessionMap.size === 1;\r\n    }\r\n}\r\n","export class EnviromentVariables {\r\n    public static getLocation(): string {\r\n        return this.getCurrentUrl();\r\n    }\r\n\r\n    private static getDefaultUrl(): string {\r\n        return 'http://localhost:8080';\r\n    }\r\n\r\n    private static getCurrentUrl(): string {\r\n        return window.location.protocol + '//' + window.location.host;\r\n    }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import 'hammerjs';\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n"],"sourceRoot":""}